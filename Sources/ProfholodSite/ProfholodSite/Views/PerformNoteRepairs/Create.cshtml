@model ProfHolodSite.Models.PerformNoteRepair

@{
    ViewBag.Title = "Create";
}

<h2>Создать</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Черновик о выполненой работе</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.DateTimeStart, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.HiddenFor(model => model.DateTimeStart)
                <div id="JDateTimeStart"></div>
                    @Html.ValidationMessageFor(model => model.DateTimeStart, "", new { @class = "text-danger" })
                </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DateTimeEnd, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                
                @Html.HiddenFor(model => model.DateTimeEnd)
                <div id="JDateTimeEnd"></div>
                @Html.ValidationMessageFor(model => model.DateTimeEnd, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RepairObjectText, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RepairObjectText, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RepairObjectText, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TypeOfFaultText, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TypeOfFaultText, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TypeOfFaultText, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RepairActionText, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RepairActionText, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RepairActionText, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ReportText, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ReportText, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ReportText, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsCompleted, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsCompleted)
                    @Html.ValidationMessageFor(model => model.IsCompleted, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Создать" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Назад", "Index")
</div>

<script type="text/javascript">

    @*$(function () {
                $("#DateTimeStart").jqxDateTimeInput({
                    width: '300px', height: '25px', culture: 'ru-RU', formatString: 'dd-MM-yyyy HH:mm',
                    value: new Date(@Model.DateTimeStart.Year, @Model.DateTimeStart.Month, @Model.DateTimeStart.Day,@Model.DateTimeStart.Hour,
                        @Model.DateTimeStart.Minute)});
            });*@

    $(function () {
        $("#JDateTimeStart").jqxDateTimeInput({
            width: '300px', height: '25px', culture: 'ru-RU', formatString: 'dd-MM-yyyy HH:mm',
            value: new Date(@Model.DateTimeStart.Year, @Model.DateTimeStart.Month, @Model.DateTimeStart.Day,@Model.DateTimeStart.Hour,
                @Model.DateTimeStart.Minute) });
        $("#JDateTimeEnd").jqxDateTimeInput({
            width: '300px', height: '25px', culture: 'ru-RU', formatString: 'dd-MM-yyyy HH:mm',
            value: new Date(@Model.DateTimeEnd.Year, @Model.DateTimeEnd.Month, @Model.DateTimeEnd.Day,@Model.DateTimeEnd.Hour,
                @Model.DateTimeEnd.Minute) });
    });
    
    $("form").submit(function(){
        document.getElementById('DateTimeStart').value =$("#JDateTimeStart").jqxDateTimeInput('getText');
        document.getElementById('DateTimeEnd').value =$("#JDateTimeEnd").jqxDateTimeInput('getText');
        
             });



</script>

@*@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}*@
